What happens when you initialize a repository? Why do you need
to do it?

When you initialize a repository, a hidden file named ".git"
is created in the directory that you were currently in. This
will contain any and all information about the repository that
git needs to track when you make commits. When you initialize
a repository, git does not automatically create a commit- you
will have to do this manually. This is so that you can create
a manual commit message for the commit.

You need to initialize a repository, because git does not have
a way to determine whether you want to create a repository for
a specific directory or not. Also, because commits are made 
manually, you must also create the repository manually. This 
also lets you determine when to create the repository, in case
you don't think your project needs to be version controlled 
just yet.


How is the staging area different from the working directory 
and the repository? What value do you think it offers?

The staging area is an "intermediate" area between the working
directory and the repository. It bridges the two, but are not
necessarily identical to either or contain the same files as
the working directory or the repository. For example, you may
decide to only commit some files at a certain point, instead
of all the files within the working directory. Alternatively,
you may decide to add more files to the repository, in which
case the staging area is not identical to the repository. The
staging area allows you to choose when and what to commit, so
that you can make sure that each commit happens after only one
logical change.


How can you use the staging area to make sure you have one
commit per logical change?

The staging area allows you to choose which files to commit
when. Hence, if you make changes to multiple files at once,
and each change is a different logical change, you can decide
to commit one file, but not the others, making sure that each
commit is only one logical change. You can also make sure
that each commit only has one logical change by using git diff
to see the difference within the files between your staging
area and the working directory, as well as the staging area
and your most recent commit.


What are some situations when branches would be helpful in 
keeping your history organized? How would branches help?

A branch would be helpful in situations where you would need
two different "versions" of a project progressing simultaneously.
An example would be when you have a master branch that has
already been commercialized and available to the public, while
you have another different branch with experimental features
that are not yet stable and ready for publication, but need to
be within the project in order to test fully. The branches will
allow you to make independent changes to each branch without
worrying about the different changes creating a catastrophe
that makes your entire project unusable.


How do the diagrams help you visualize the branch structure?

The diagrams let you see which commits are in line for that
branch, and are also helpful in letting you identify which
commits have common parents, and where these branches had
forked. It also let's you see which commits are unreachable
and prompt you to fix that quickly.


What is the result of merging two branches together? Why do we
represent it in the diagram the way we do?

The result of merging two branches together is a child commit
that has two parents, one from each of the branch that is merged.
The commit will compare the two branches to the last commit 
before the two branches separated, thus deciphering whether a
change within a branch is a simple deletion from the original or
a new addition. Merge will determine whether the changes are
necessary for the final product, and the final commit will contain
additions from both branches, and deletions that are present in
even just one branch. It is represented as such in the diagram 
because the child commit now contains the changes from both
branches, and thus has two parents.


What are the pros and cons of Gitâ€™s automatic merging vs. 
always doing merges manually?

Pros of automatic merging is that it is quick and requires no
input from the user when the two branches are working on
completely different parts of the project and there is no 
overlap in the changes in the code. Less communication between
the devs needed, and the merge can be done very quickly. However,
if the changes are done on the same parts of the code and one
branch's dependency breaks, the devs need to communicate to make
sure that the changes kept do not break the entire project.
If done manually every time, you can make sure that changes on
both sides of the merge do not break the other side each time.
However, this would require communication between devs each time,
and the merger will need to be aware of the changes that were
made in the other branch.