What happens when you initialize a repository? Why do you need
to do it?

When you initialize a repository, a hidden file named ".git"
is created in the directory that you were currently in. This
will contain any and all information about the repository that
git needs to track when you make commits. When you initialize
a repository, git does not automatically create a commit- you
will have to do this manually. This is so that you can create
a manual commit message for the commit.

You need to initialize a repository, because git does not have
a way to determine whether you want to create a repository for
a specific directory or not. Also, because commits are made 
manually, you must also create the repository manually. This 
also lets you determine when to create the repository, in case
you don't think your project needs to be version controlled 
just yet.


How is the staging area different from the working directory 
and the repository? What value do you think it offers?

The staging area is an "intermediate" area between the working
directory and the repository. It bridges the two, but are not
necessarily identical to either or contain the same files as
the working directory or the repository. For example, you may
decide to only commit some files at a certain point, instead
of all the files within the working directory. Alternatively,
you may decide to add more files to the repository, in which
case the staging area is not identical to the repository. The
staging area allows you to choose when and what to commit, so
that you can make sure that each commit happens after only one
logical change.


How can you use the staging area to make sure you have one
commit per logical change?

The staging area allows you to choose which files to commit
when. Hence, if you make changes to multiple files at once,
and each change is a different logical change, you can decide
to commit one file, but not the others, making sure that each
commit is only one logical change. You can also make sure
that each commit only has one logical change by using git diff
to see the difference within the files between your staging
area and the working directory, as well as the staging area
and your most recent commit.