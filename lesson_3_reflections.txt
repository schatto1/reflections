When would you want to use a remote repository rather than keeping
all your work local?

You would want to use your remote repository when you are working
on a collaborative project with multiple people, from a different
machine as your usual workstation, or if your workstation does
not have the storage capacity to have the complete project saved
on it's hard disk. When working on a collaborative project, using
a remote repository allows you and your collaborators to have one
central repository to refer to, and decreases the number of times 
branches are created or merged. If working from a machine that is 
different from your usual workstation, if your project is on a 
remote repository, you can instantly sync the progress onto your 
current workstation, make the changes, and then push it back to 
the remote repository, so you can update the local copy on your 
main workstation later. You can also push projects to your remote 
repository, and if possible and prudent, get rid of the local 
copy, freeing up some space on your local drive.


Why might you want to always pull changes manually rather than 
having Git automatically stay up-to-date with your remote 
repository?

A remote repository is essentially a back up- you want to stay
up to date, but not interfere with the progress you are making
on the local copy. This also prevents needless updates and
confusion, especially when you are working on a collaborative
project. Your collaborators may push an update to the remote
repository, but by keeping it manual, you can make sure you want
to pull the version with these updates before Git actually does
so. This lets you figure out if there are any changes in the
remote repository that may cause conflits with your local
changes.


Describe the differences between forks, clones, and branches.
When would you use one instead of another?

Forks are when you clone a remote repository to another remote
repository onto your account, and only happens on Github. Clones
and branches can happen on both remote repositories and local
repositories. You can clone a remote repository to a local drive,
and you can also clone a local repository to another local
location. Branches are created when you commit a change, but 
do not want that change to be part of the current branch that 
you are working on, and you can create a branch both in the 
remote and local repositories, independent of each other.


What is the benefit of having a copy of the last known state
of the remote stored locally?

THe benefit of having a copy remote stored locally is that 
you can compare your updated local copy with the local copy of
the remote, and then with the updated remote copy to see what
changes need to be kept when there are changes in both the local
and remote copies. Hence, when pulling from an updated remote
copy, Git is essentially doing a "merge" between the local copy
of the remote, and the remote copy, and then merging that with
your updated local copy.